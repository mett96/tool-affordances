function [dataEff,dataPred, dataClust,orient,dataOrI,dataTP] = readPredict(dataDir)

%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\ProgramsTanis\MATLAB\data\dataICRA\dataPredict\predictRobot2\actionEffect\data.log
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2014/09/30 14:07:15



%% Initialize variables.
dataEff = [];
dataPred = [];
dataClust = [];
orient = [];
dataOrI = [];
dataTP =[];
fprintf('reading predict data');
dirname = [dataDir];
folders = dir(dirname);

for foldI =1:length(folders)
    if (length(folders(foldI).name)>3) && (strcmp(folders(foldI).name(1:6),'action'))
        filename = [dirname,'\',folders(foldI).name ,'\data.log']
        delimiter = ' ';

        %% Read columns of data as strings:
        % For more information, see the TEXTSCAN documentation.
        formatSpec = '%*s%*s%s%s%s%[^\n\r]';

        %% Open the text file.
        fileID = fopen(filename,'r');

        %% Read columns of data according to format string.
        % This call is based on the structure of the file used to generate this
        % code. If an error occurs for a different file, try regenerating the code
        % from the Import Tool.
        dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true,  'ReturnOnError', false);

        %% Close the text file.
        fclose(fileID);

        %% Convert the contents of columns containing numeric strings to numbers.
        % Replace non-numeric strings with NaN.
        raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
        for col=1:length(dataArray)-1
            raw(1:length(dataArray{col}),col) = dataArray{col};
        end
        numericData = NaN(size(dataArray{1},1),size(dataArray,2));

        for col=[2,3]
            % Converts strings in the input cell array to numbers. Replaced non-numeric
            % strings with NaN.
            rawData = dataArray{col};
            for row=1:size(rawData, 1);
                % Create a regular expression to detect and remove non-numeric prefixes and
                % suffixes.
                regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
                try
                    result = regexp(rawData{row}, regexstr, 'names');
                    numbers = result.numbers;

                    % Detected commas in non-thousand locations.
                    invalidThousandsSeparator = false;
                    if any(numbers==',');
                        thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                        if isempty(regexp(thousandsRegExp, ',', 'once'));
                            numbers = NaN;
                            invalidThousandsSeparator = true;
                        end
                    end
                    % Convert numeric strings to numbers.
                    if ~invalidThousandsSeparator;
                        numbers = textscan(strrep(numbers, ',', ''), '%f');
                        numericData(row, col) = numbers{1};
                        raw{row, col} = numbers{1};
                    end
                catch me
                end
            end
        end

        %% Split data into numeric and cell columns.
        rawNumericColumns = raw(:, [2,3]);
        rawCellColumns = raw(:, 1);


        %% Replace non-numeric cells with NaN
        R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
        rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

        %% Allocate imported array to column variable names
        toolpose = rawCellColumns(:, 1);
        VarName4 = cell2mat(rawNumericColumns(:, 1));
        VarName5 = cell2mat(rawNumericColumns(:, 2));


        %%Sort out the different values
        N = length(VarName4);
        predEff = zeros(floor(N/4),1);
        realEff = zeros(floor(N/4),1);
        predClust = zeros(floor(N/4),1);
        orientFile = zeros(floor(N/4),1);
        orI = zeros(floor(N/4),1);
        tp = zeros(floor(N/4),1);
        
        for i=1:N
            trial = ceil((i)/4);            
            if mod(i,4)==0      % fourth row in each trial -> effect
                realEff(trial) = VarName5(i);  
            elseif mod(i,4)==1      % fourth row in each trial -> effect
                orientFile(trial) = VarName5(i);
                tp(trial) = VarName4(i);
                if (orientFile(trial) == -90)
                    orI(trial) = 1;
                elseif (orientFile(trial) == 0)
                    orI(trial) = 2;
                elseif (orientFile(trial) == 90)
                    orI(trial) = 3;
                end
            elseif mod(i,4)==2          % second row in each trial -> prediction
                predEff(trial) = VarName5(i);
                predClust(trial) = VarName4(i);                    
            end
         end
        realEff(realEff > 0.4)= 0.3;           
            
        dataClust = [dataClust; predClust];
        dataEff = [dataEff; realEff];
        dataPred = [dataPred; predEff];
        orient = [orient; orientFile];
        dataOrI= [dataOrI; orI];
        dataTP = [dataTP; tp];
   end    
    
end

%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me rawNumericColumns rawCellColumns R;