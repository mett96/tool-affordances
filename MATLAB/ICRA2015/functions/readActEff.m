function [toolPoseAff,toolPoseLabel] = readActEff(dataDir, tool)

%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\Tanis Mar\Documents\MATLAB\data\actionEffect_17Jul\data.log
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2014/07/17 14:21:54
%tool = 'hoe';

%% Initialize variables.
toolPoseAff = [];
fprintf('reading %s data',tool);
dirname = [dataDir,'\',tool];
folders = dir(dirname);

for foldI =1:length(folders)
    if (length(folders(foldI).name)>3) && (strcmp(folders(foldI).name(1:6),'action'))
        filename = [dirname,'\',folders(foldI).name ,'\data.log']
        delimiter = ' ';

        %% Format string for each line of text:
        %   column5: double (%f)
        %	column6: text (%s)
        % For more information, see the TEXTSCAN documentation.
        formatSpec = '%*s%*s%*s%*1s%f%s%*s%*s%[^\n\r]';

        %% Open the text file.
        fileID = fopen(filename,'r');

        %% Read columns of data according to format string.
        % This call is based on the structure of the file used to generate this
        % code. If an error occurs for a different file, try regenerating the code
        % from the Import Tool.
        dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true,  'ReturnOnError', false);

        %% Close the text file.
        fclose(fileID);

        %% Post processing for unimportable data.
        % No unimportable data rules were applied during the import, so no post
        % processing code is included. To generate code which works for
        % unimportable data, select unimportable cells in a file and regenerate the
        % script.


        %% Allocate imported array to column variable names
        N = size(dataArray{1},1);
        dataAction = zeros(floor(N/2),1);
        dataFile = zeros(floor(N/2),1);
        for i=1:N
            trial = floor((i+1)/2);
            if mod(i,2)==1          % odd rows -> actions
                dataAction(trial) = dataArray{1}(i);
            elseif mod(i,2)==0      % even rows -> effects
                if (length(dataArray{2}{i})<6)
                    dataArray{2}{i}(end:6) = repmat('0',6-length(dataArray{2}{i})+1,1);
                end
                dataFile(trial) = str2num(dataArray{2}{i}(1:5));

            end
        end
        
        %fix stange behaviors
        dataFile(dataFile>0.4)= 0.3;
        
        % Order the data stream intro trials, and take care for broken ones. 
        fullTrialsN = floor(length(dataFile)/11);
        dataEffect= reshape(dataFile(1:11*fullTrialsN),11,fullTrialsN)';
        toolPoseAff = [toolPoseAff; dataEffect];
        
    end    
    
end
%plot(toolPoseAff);
toolPoseLabel = repmat(tool,size(toolPoseAff,1),1);
%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans;